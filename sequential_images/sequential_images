#!/usr/bin/env python3

import re
import datetime
import sys
import subprocess
import shlex # Used for safely formatting command for printing
from pathlib import Path # Import Path from pathlib

class DestDirs:
    MAX_FILES : int = 200

    @staticmethod
    def _make_new_destdir(base_dir : Path) -> Path:
        today = datetime.date.today()
        latest_dir = base_dir / f"{today.year:04d}-{today.month:02d}"
        n = 1
        while latest_dir.exists():
            latest_dir = latest_dir.with_name(latest_dir.name + f"-{n}")
            n += 1
        latest_dir.mkdir()
        return latest_dir

    """Maintains numbered subdirs with 100 files each"""
    def __init__(self, base_dir: Path):
        self._base = base_dir

        # find the latest open dir...
        latest_dir: Path|None = None
        for entry in self._base.iterdir():
            if entry.is_dir() and entry.name.startswith('2'): # HACK! starts with 2 is good enough...
                if (latest_dir is None) or (latest_dir.name < entry.name):
                    latest_dir = entry
        
        if latest_dir is None:  # not even one found!
            latest_dir = DestDirs._make_new_destdir(self._base)

        # ok, we have the last directory, see how many files there are
        fname_re = re.compile(r'img-(\d+).webp', re.IGNORECASE)
        last_file = 0
        for entry in latest_dir.iterdir():
            if entry.is_file():
                if match := fname_re.match(entry.name):
                    last_file = max(last_file, int(match.group(1)))
        
        # if we are out of space, move on...
        if last_file >= DestDirs.MAX_FILES:
            last_file, latest_dir = 0, DestDirs._make_new_destdir(self._base)
        self._directory = latest_dir
        self._last_file = last_file

    def move_in_file(self, src : Path) -> None:
        """Move a file into the destiation dir, converting it to WEBP if necessary"""
        CONVERSION_QUALITY = "75" # ImageMagick quality setting for webp conversion
        new_fp = self._directory / f"img-{self._last_file + 1:04d}.webp"
        if (src.suffix == '.webp') or (src.suffix == '.WEBP'):
            src.rename(new_fp)
            self._last_file += 1
        else:
            command = [
                'magick',
                str(src), # Explicitly convert Path to string for magick if needed (though often not)
                '-quality', CONVERSION_QUALITY,
                str(new_fp) # Explicitly convert Path to string
            ]
            # Use shlex.join for safe printing of the command
            print(f"  Running command: {' '.join(shlex.quote(arg) for arg in command)}")

            # Execute the command
            result = subprocess.run(command, capture_output=True, text=True, check=False)

            # Check if conversion was successful
            if result.returncode == 0:
                self._last_file += 1
                try:
                    src.unlink()
                except OSError as delete_error:
                    print(f"  [Warning] Could not delete original file '{src.name}': {delete_error}", file=sys.stderr)
            else:
                # Print error message from magick if conversion failed
                print(f"  [Error] ImageMagick conversion failed for '{src.name}'.", file=sys.stderr)
                print(f"  Return Code: {result.returncode}", file=sys.stderr)
                if result.stderr:
                    print(f"  Stderr:\n{result.stderr.strip()}", file=sys.stderr)
                if result.stdout: # Sometimes errors go to stdout
                     print(f"  Stdout:\n{result.stdout.strip()}", file=sys.stderr)
        if self._last_file > DestDirs.MAX_FILES:
            self._last_file, self._directory = 0, DestDirs._make_new_destdir(self._base)


def convert_and_rename_images_in_subdirs(src_dir : Path, dest_dirs: DestDirs) -> None:
    """
    Traverses src_dir, getting image files and pushing them into dest_dirs.
    """
    process_pattern = re.compile(r"^\.(webp|png|gif|jpe?g)$", re.IGNORECASE)
    for entry in src_dir.iterdir():        
        if entry.is_file() and process_pattern.match(entry.suffix):
            print(f'Processing {entry.name}.', file=sys.stderr)
            dest_dirs.move_in_file(entry)

if __name__ == "__main__":
    # Check if 'magick' command exists
    try:
        subprocess.run(['magick', '-version'], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Error: ImageMagick 'magick' command not found or not executable.", file=sys.stderr)
        print("Please install ImageMagick and ensure 'magick' is in your system PATH.", file=sys.stderr)
        sys.exit(1) # Exit if magick is not available

    import argparse
    ap = argparse.ArgumentParser(description="Copies images into webp sequentially.")
    ap.add_argument('-d','--dest', type=Path, default='.', help="Base path for output directories (default '.')")
    ap.add_argument('-s', '--src', type=Path, default='input', help="Base directory for new files to add (default 'input')")
    args = ap.parse_args()
    
    dd = DestDirs(args.dest)
    convert_and_rename_images_in_subdirs(args.src, dd)
